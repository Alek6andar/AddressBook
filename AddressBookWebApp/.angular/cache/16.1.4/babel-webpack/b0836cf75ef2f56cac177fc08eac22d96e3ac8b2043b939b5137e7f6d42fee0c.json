{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ContactService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.apiURL = \"https://localhost:7271/api\";\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': 'https://localhost'\n      })\n    };\n  }\n  getAll() {\n    console.log(\"Fetching\");\n    return this.httpClient.get(this.apiURL + '/Contacts').pipe(catchError(this.errorHandler));\n  }\n  create(post) {\n    return this.httpClient.post(this.apiURL + '/Contacts/', JSON.stringify(post), this.httpOptions).pipe(catchError(this.errorHandler));\n  }\n  find(id) {\n    return this.httpClient.get(this.apiURL + '/Contacts/' + id).pipe(catchError(this.errorHandler));\n  }\n  update(id, contact) {\n    return this.httpClient.put(this.apiURL + '/Contacts/' + id, JSON.stringify(contact), this.httpOptions).pipe(catchError(this.errorHandler));\n  }\n  delete(id) {\n    return this.httpClient.delete(this.apiURL + '/Contacts/' + id, this.httpOptions).pipe(catchError(this.errorHandler));\n  }\n  errorHandler(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = error.error.message;\n    } else {\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    return throwError(errorMessage);\n  }\n}\nContactService.ɵfac = function ContactService_Factory(t) {\n  return new (t || ContactService)(i0.ɵɵinject(i1.HttpClient));\n};\nContactService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ContactService,\n  factory: ContactService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","throwError","catchError","ContactService","constructor","httpClient","apiURL","httpOptions","headers","getAll","console","log","get","pipe","errorHandler","create","post","JSON","stringify","find","id","update","contact","put","delete","error","errorMessage","ErrorEvent","message","status","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\code\\AddressBookWebApp\\src\\app\\contact\\contact.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n    \r\nimport {  Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n   \r\nimport { Contact } from './contact';\r\n    \r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ContactService {\r\n    \r\n  private apiURL = \"https://localhost:7271/api\";\r\n    \r\n  httpOptions = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Access-Control-Allow-Origin':'https://localhost'\r\n    })\r\n  }\r\n   \r\n  constructor(private httpClient: HttpClient) { }\r\n    \r\n  getAll(): Observable<Contact[]> {\r\n    console.log(\"Fetching\")\r\n    return this.httpClient.get<Contact[]>(this.apiURL + '/Contacts')\r\n    .pipe(\r\n      catchError(this.errorHandler)\r\n    )\r\n  }\r\n    \r\n  create(post: string): Observable<Contact> {\r\n    return this.httpClient.post<Contact>(this.apiURL + '/Contacts/', JSON.stringify(post), this.httpOptions)\r\n    .pipe(\r\n      catchError(this.errorHandler)\r\n    )\r\n  }  \r\n    \r\n  find(id: string): Observable<Contact> {\r\n    return this.httpClient.get<Contact>(this.apiURL + '/Contacts/' + id)\r\n    .pipe(\r\n      catchError(this.errorHandler)\r\n    )\r\n  }\r\n    \r\n  update(id: string, contact: Contact): Observable<Contact> {\r\n    return this.httpClient.put<Contact>(this.apiURL + '/Contacts/' + id, JSON.stringify(contact), this.httpOptions)\r\n    .pipe(\r\n      catchError(this.errorHandler)\r\n    )\r\n  }\r\n    \r\n  delete(id: string){\r\n    return this.httpClient.delete<Contact>(this.apiURL + '/Contacts/' + id, this.httpOptions)\r\n    .pipe(\r\n      catchError(this.errorHandler)\r\n    )\r\n  }\r\n     \r\n   \r\n  errorHandler(error: any) {\r\n    let errorMessage = '';\r\n    if(error.error instanceof ErrorEvent) {\r\n      errorMessage = error.error.message;\r\n    } else {\r\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\r\n    }\r\n    return throwError(errorMessage);\r\n }\r\n}"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAAsBC,UAAU,QAAQ,MAAM;AAC9C,SAASC,UAAU,QAAQ,gBAAgB;;;AAO3C,OAAM,MAAOC,cAAc;EAWzBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IATtB,KAAAC,MAAM,GAAG,4BAA4B;IAE7C,KAAAC,WAAW,GAAG;MACZC,OAAO,EAAE,IAAIR,WAAW,CAAC;QACvB,cAAc,EAAE,kBAAkB;QAClC,6BAA6B,EAAC;OAC/B;KACF;EAE6C;EAE9CS,MAAMA,CAAA;IACJC,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;IACvB,OAAO,IAAI,CAACN,UAAU,CAACO,GAAG,CAAY,IAAI,CAACN,MAAM,GAAG,WAAW,CAAC,CAC/DO,IAAI,CACHX,UAAU,CAAC,IAAI,CAACY,YAAY,CAAC,CAC9B;EACH;EAEAC,MAAMA,CAACC,IAAY;IACjB,OAAO,IAAI,CAACX,UAAU,CAACW,IAAI,CAAU,IAAI,CAACV,MAAM,GAAG,YAAY,EAAEW,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC,EAAE,IAAI,CAACT,WAAW,CAAC,CACvGM,IAAI,CACHX,UAAU,CAAC,IAAI,CAACY,YAAY,CAAC,CAC9B;EACH;EAEAK,IAAIA,CAACC,EAAU;IACb,OAAO,IAAI,CAACf,UAAU,CAACO,GAAG,CAAU,IAAI,CAACN,MAAM,GAAG,YAAY,GAAGc,EAAE,CAAC,CACnEP,IAAI,CACHX,UAAU,CAAC,IAAI,CAACY,YAAY,CAAC,CAC9B;EACH;EAEAO,MAAMA,CAACD,EAAU,EAAEE,OAAgB;IACjC,OAAO,IAAI,CAACjB,UAAU,CAACkB,GAAG,CAAU,IAAI,CAACjB,MAAM,GAAG,YAAY,GAAGc,EAAE,EAAEH,IAAI,CAACC,SAAS,CAACI,OAAO,CAAC,EAAE,IAAI,CAACf,WAAW,CAAC,CAC9GM,IAAI,CACHX,UAAU,CAAC,IAAI,CAACY,YAAY,CAAC,CAC9B;EACH;EAEAU,MAAMA,CAACJ,EAAU;IACf,OAAO,IAAI,CAACf,UAAU,CAACmB,MAAM,CAAU,IAAI,CAAClB,MAAM,GAAG,YAAY,GAAGc,EAAE,EAAE,IAAI,CAACb,WAAW,CAAC,CACxFM,IAAI,CACHX,UAAU,CAAC,IAAI,CAACY,YAAY,CAAC,CAC9B;EACH;EAGAA,YAAYA,CAACW,KAAU;IACrB,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAGD,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACpCD,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MAAM;MACLF,YAAY,GAAG,eAAeD,KAAK,CAACI,MAAM,cAAcJ,KAAK,CAACG,OAAO,EAAE;;IAEzE,OAAO3B,UAAU,CAACyB,YAAY,CAAC;EAClC;;AA1DYvB,cAAc,C;mBAAdA,cAAc,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAd9B,cAAc,C;SAAdA,cAAc;EAAA+B,OAAA,EAAd/B,cAAc,CAAAgC,IAAA;EAAAC,UAAA,EAFb;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}